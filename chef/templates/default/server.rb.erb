#
# Chef Server Config File
#
# Dynamically generated by Chef - local modifications will be replaced
#
# chef-server is a Merb application slice. By default it is configured to
# run via Thin, the default Merb adapter. It can be run as:
#
# chef-server -p 4000 -e production -a thin
#
# This starts up the RESTful Chef Server API on port 4000 in production mode
# using the thin server adapter.
#
# For details on how to set up the chef-server with a web front end proxy
# (nginx, apache, etc) or as an application under Passenger, see the Chef
# Wiki, under Additional Resources.
#
# This file configures the behavior of the running server itself.
#
# Chef uses a Ruby DSL for configuration, and this file contains a few
# Ruby idioms. First, symbols. These are designated by a colon sigil, ie,
# :value. Second, in Ruby, everything but false and nil (no quotes or other
# designations) is true, including true, the integer 0 and the string "false".
# So to set the value of a setting to false, write:
#
# some_setting false
#
# Third, Ruby class methods can be used, for example we tell the log to show
# the current time stamp with Chef::Log::Formatter.show_time, below.
#
# log_level specifies the level of verbosity for output.
# valid values are: :debug, :info, :warn, :error, :fatal

# Default is :info, see http://tickets.opscode.com/browse/CHEF-1122
log_level          :warn

# log_location specifies where the server should log to.
# valid values are: a quoted string specifying a file, or STDOUT with
# no quotes. This is the application log for the Merb workers that get
# spawned.

log_location       STDOUT

# ssl_verify_mode specifies if the REST client should verify SSL certificates.
# valid values are :verify_none, :verify_peer. The default Chef Server
# installation will use a self-generated SSL certificate so this
# should be :verify_none unless you replace the certificate.

ssl_verify_mode    :verify_none

# chef_server_url specifies the URL for the server API. The process actually
# listens on 0.0.0.0:PORT.
# valid values are any HTTP URL.

chef_server_url    "<%= node[:chef][:server_url] %>"

# cookbook_path is a Ruby array of filesystem locations to search for
# cookbooks.
# valid value is a string, or an array of strings of filesystem directory
# locations.
# This setting is searched beginning (index 0) to end in order. You might
# specify
# multiple search paths for cookbooks if you want to use an upstream source,
# and
# provide localised "site" overrides. These should come after the 'upstream'
# source.
# The default value, /var/lib/chef/cookbooks does not contain any cookbooks by
# default.
# See the Chef Wiki for more information about setting up a local repository
# for
# working on cookbooks.
# http://wiki.opscode.com/display/chef/Chef+Repository

cookbook_path      [ "<%= node[:chef][:serve_path] %>/cookbooks", "<%= node[:chef][:serve_path] %>/site-cookbooks" ]
cookbook_tarball_path "<%= node[:chef][:cache_path] %>/cookbook-tarballs"

# file_cache_path specifies where the client should cache cookbooks, server
# cookie ID, and openid registration data.
# valid value is any filesystem directory location.

file_cache_path    "<%= node[:chef][:cache_path] %>"

# node_path specifies a location for where to find node-specific recipes.
# valid values are any filesystem direcory location.

node_path          "<%= node[:chef][:serve_path] %>/nodes"

# openid_store_path specifies a location where to keep openid nonces for
# clients.
# valid values are any filesystem directory location.
#
# NOTE: OpenID is deprecated and this option may not be used, kept for
# historical purposes.

openid_store_path  "<%= node[:chef][:path] %>/openid/store"

# openid_store_path specifies a location where to keep openid nonces for
# clients.
# valid values are any filesystem directory location.
#
# NOTE: OpenID is deprecated and this option may not be used, kept for
# historical purposes and may be removed.

openid_cstore_path "<%= node[:chef][:path] %>/openid/cstore"

search_index_path  "<%= node[:chef][:path] %>/search_index"

# role_path designates where the server should load role JSON and Ruby DSL
# files from.
# valid values are any filesystem directory location. Roles are a feature
# that allow you to easily reuse lists of recipes and attribute settings.
# Please see the Chef Wiki page for information on how to utilize the feature.
# http://wiki.opscode.com/display/chef/Roles
#
# NOTE: The role_path setting is deprecated on the chef-server, as the
# roles are now stored directly in CouchDB rather than on the filesystem.
# This option is kept for historical purposes and may be removed.

role_path          "<%= node[:chef][:serve_path] %>/roles"

# Mixlib::Log::Formatter.show_time specifies whether the chef-client log should
# contain timestamps.
# valid values are true or false (no quotes, see above about Ruby idioms). The
# printed timestamp is rfc2822, for example:
# Fri, 31 Jul 2009 19:19:46 -0600

Mixlib::Log::Formatter.show_time = true

# Name used to validate new nodes

# Name and certificate of the web interface user
web_ui_client_name     "chef-webui"
web_ui_key             "/etc/chef/webui.pem"

<% if node[:chef][:webui_enabled] -%>
web_ui_admin_user_name "admin"

<% end -%>
supportdir = "<%= node[:chef][:path] %>/support"
solr_jetty_path File.join(supportdir, "solr", "jetty")
solr_data_path  File.join(supportdir, "solr", "data")
solr_home_path  File.join(supportdir, "solr", "home")
solr_heap_size  "<%= node[:chef][:solr_heap_size] %>"

umask <%= node[:chef][:umask] %>

signing_ca_cert    "/etc/chef/certificates/cert.pem"
signing_ca_key     "/etc/chef/certificates/key.pem"
signing_ca_user    "root"
signing_ca_group   "root"

# rabbitmq password
amqp_pass File.read('/etc/chef/amqp_passwd').chomp

couchdb_database 'chef'
umask 0022
# required?
validation_client_name "<%= node[:chef][:validation_client_name] %>"
validation_key         "/etc/chef/validation.pem"
client_key             "/etc/chef/client.pem"

# Where to store the checksums

cache_options({ :path => "/var/cache/chef/checksums", :skip_expires => true })
